@model IEnumerable<myfoodapp.Hub.Models.ProductionUnit>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div id="main-section-header" class="row">
    <h2 id="team-efficiency" class="col-xs-3">Production Units Management</h2>
    <div style="clear:both;"></div>
</div>

<div id="productionUnits-grid" class="main-section-content row">
    <div id="productionUnits-details" class="col-xs-2">
        <h3 class="section-header">Manage Production Units from Pioneer Citizen Network</h3>
    </div>
    <div id="grid-container" class="col-xs-10">
        @(Html.Kendo().Grid<myfoodapp.Hub.Models.ProductionUnitViewModel>()
        .Name("grid")
        .Columns(columns =>
        {
            columns.Bound(c => c.Id).Width(75);
            columns.Bound(c => c.startDate).Format("{0:d}").Width(100);
            columns.Bound(c => c.reference).Width(75);
            columns.Bound(c => c.locationLatitude).Width(75).Title("Lat.");
            columns.Bound(c => c.locationLongitude).Width(75).Title("Long.");
            columns.Bound(c => c.version).Width(100);
            columns.Bound(c => c.info).Width(175);
            columns.ForeignKey(c => c.productionUnitTypeId, (System.Collections.IEnumerable)ViewData["productionUnitTypes"], "Id", "name").Title("Prod. Type").Width(100);
            columns.ForeignKey(c => c.ownerId, (System.Collections.IEnumerable)ViewData["owners"], "Id", "pioneerCitizenName").Title("Owner").Width(100);
            //columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
            columns.Command(command => { command.Destroy(); }).Width(250);
        })
        .ToolBar(toolbar =>
        {
            toolbar.Create();
            toolbar.Save();
        })
        .HtmlAttributes(new { style = "height: 800px;" })
        //.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("ProductionUnitEditTemplate"))
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Navigatable()
        .Sortable()
        .Scrollable()
        .Filterable()
        .Groupable()
        .ColumnMenu()
        .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
        .DataSource(dataSource => dataSource
            .Ajax()
            .PageSize(20)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(c => c.Id);
                model.Field(c => c.Id).Editable(false);
                model.Field(c => c.startDate).Editable(true);
                model.Field(c => c.reference).Editable(true);
                model.Field(c => c.locationLatitude).Editable(true);
                model.Field(c => c.locationLongitude).Editable(true);
                model.Field(c => c.version).Editable(true);
                model.Field(c => c.info).Editable(true);
                model.Field(c => c.productionUnitTypeId).DefaultValue(1);
                model.Field(c => c.ownerId).DefaultValue(1);
            })
            .Events(events => events.Error("error_handler"))
            .Create("Editing_Create", "ProductionUnits")
            .Read("Editing_Read", "ProductionUnits")
            .Update("Editing_Update", "ProductionUnits")
            .Destroy("Editing_Destroy", "ProductionUnits")
        )
        )
    </div>

</div>

<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var measure = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        measure += this + "\n";
                    });
                }
            });
            alert(measure);
        }
    }
</script>

