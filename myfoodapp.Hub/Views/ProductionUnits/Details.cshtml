@model IEnumerable<myfoodapp.Hub.Models.ProductionUnit>

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
    $(window).on("resize", function () {
        var Measures = $("#Measures").data("kendoChart");

        if ($(window).width() < 480) {
            Measures.options.categoryAxis[1].labels.rotation = 45;
            Measures.options.categoryAxis[1].labels.step = 180;
            Measures.options.categoryAxis[1].majorGridLines.step = 180;
            Measures.options.categoryAxis[1].majorTicks.step = 180;

            Measures.options.categoryAxis[0].majorGridLines.step = 180;
            Measures.options.categoryAxis[0].majorTicks.step = 180;
        }
        else
        {
            Measures.options.categoryAxis[1].labels.rotation = 0;
            Measures.options.categoryAxis[1].labels.step = 100;
            Measures.options.categoryAxis[1].majorGridLines.step = 100;
            Measures.options.categoryAxis[1].majorTicks.step = 100;

            Measures.options.categoryAxis[0].majorGridLines.step = 100;
            Measures.options.categoryAxis[0].majorTicks.step = 100;
        }

        Measures.refresh();
        Measures.resize();
    });

    window.onload = function onLoad(e) {

        var Measures = $("#Measures").data("kendoChart");

        if ($(window).width() < 480)
        {
            Measures.options.categoryAxis[1].labels.rotation = 45;
            Measures.options.categoryAxis[1].labels.step = 200;
            Measures.options.categoryAxis[1].majorGridLines.step = 200;
            Measures.options.categoryAxis[1].majorTicks.step = 200;

            Measures.options.categoryAxis[0].majorGridLines.step = 200;
            Measures.options.categoryAxis[0].majorTicks.step = 200;

            Measures.refresh();
        }

        var OptionList = $("#OptionList").data("kendoListView");

        var productionUnitId = $('#routeDataId').val();

        $.ajax({
            url: "@Url.Action("GetProductionUnitDetail", "ProductionUnits")",
            dataType: "json",
            data: {id: productionUnitId},
            type: "POST",
            success: function (response) {
                $("#PioneerCitizenName").text('NAME: ' + response.PioneerCitizenName);
                $("#PioneerCitizenNumber").text('NUMBER: ' + response.PioneerCitizenNumber);
                $("#ProductionUnitType").text('TYPE: ' + response.ProductionUnitType);
                $("#ProductionUnitVersion").text('VERSION: ' + response.ProductionUnitVersion);
                $("#ProductionUnitStartDate").text('START DATE: ' + kendo.toString(kendo.parseDate(response.ProductionUnitStartDate, 'yyyy-MM-dd'), 'MM/dd/yyyy'));
                $("#AverageMonthlyProduction").text('EST. PROD. PER MONTH: ' + response.AverageMonthlyProduction + 'kg');
                $("#AverageMonthlySparedCO2").text('CO2 NOT RELEASED PER MONTH: ' + response.AverageMonthlySparedCO2 + 'kg');

                if (response.PicturePath === null)
                {
                    $("#ProductionUnitPicture").hide();
                    $("#PerfChart").hide();
                }
                else
                {
                    $("#ProductionUnitPicture").attr("src", "/Content/Pictures/" + response.PicturePath);
                    $("#ProductionUnitPicture").show();
                    $("#PerfChart").show();
                }
                $("#ProductionUnitPicture").attr("src", "/Content/Pictures/" + response.PicturePath);
            }
        });

        Measures.dataSource.read({ id: productionUnitId });
        OptionList.dataSource.read({ id: productionUnitId });

        var myVal = $("#displayManagementBtn").val();
        if (myVal === 'None')
        {
            $("#managementButton").hide();
        }
    }

    function onMeasuresDataBound() {
        var Measures = $("#Measures").data("kendoChart");

        var items = Measures.dataSource.data().length;
        $("#MeasureNoData").toggle(items === 0);
    }

    function onViewEventsClick() {
        var productionUnitId = $('#routeDataId').val();
        window.location = window.location.origin + "/ProductionUnits/Events/" + productionUnitId;
    }

    function onManageUnitClick() {
        var productionUnitId = $('#routeDataId').val();
        window.location = window.location.origin + "/ProductionUnits/Update/" + productionUnitId;
    }

</script>

<script type="text/x-kendo-tmpl" id="templateOption">
    <div class="option">
        <span>&bull; #:name#</span>
    </div>
</script>


<input type="hidden" value='@ViewContext.RouteData.Values["id"]' id="routeDataId" />
<input type="hidden" id="displayManagementBtn" value="@ViewBag.DisplayManagementBtn" />

<div id="main-section-header" class="row">
    <h2>Production Unit Details</h2>
    <div style="clear:both;"></div>
</div>

<div id="productionUnits-grid" class="main-section-content row">
    <div id="productionUnits-details" class="col-md-2">
        <br/>
        <div>
            <h2 id="AverageMonthlyProduction"></h2>
            <h2 id="AverageMonthlySparedCO2"></h2>
        </div>
        <br/>
        <h2 id="PioneerCitizenName"></h2>
        <div id="PioneerCitizenNumber"><span></span></div>
        <div id="ProductionUnitType"><span></span></div>
        <div id="ProductionUnitVersion"><span></span></div>
        <div id="ProductionUnitStartDate"><span></span></div>
        <h3 class="section-header">OPTIONS</h3>
        @(Html.Kendo().ListView<myfoodapp.Hub.Models.Option>()
            .Name("OptionList")
            .TagName("div")
            .ClientTemplateId("templateOption")
            .DataSource(dataSource => dataSource
              .Read(read => read.Action("Option_Read", "ProductionUnits", new { id = Url.RequestContext.RouteData.Values["id"] }))
            )
        )

        <br/>
        
        <div id="managementButton">
            <p>
                @(Html.Kendo().Button()
            .Name("viewEventsButton")
            .HtmlAttributes(new { @class = "toggleButton btn-block" })
            .Content("View Events")
            .Events(ev => ev.Click("onViewEventsClick")))
            </p>
         
            <p>
                @(Html.Kendo().Button()
            .Name("manageUnitButton")
            .HtmlAttributes(new { @class = "toggleButton btn-block" })
            .Content("Manage Unit")
            .Events(ev => ev.Click("onManageUnitClick")))
            </p>
        </div>

</div>
   
<div id="measures-container" class="col-md-10">
    <h3 class="section-header">Last week measures</h3>
    <div class="sparkline-container">
        @(Html.Kendo().Chart<myfoodapp.Hub.Models.GroupedMeasure>()
            .Name("Measures")
            .Theme("metro")
            .AutoBind(false)
            .Panes(panes =>
            {
                panes.Add().Title("Basic sensors");
                panes.Add("advancedPane").Title("Advanced sensors").Height(150);
            })
            .Legend(legend => legend
                .Visible(true)
                .Position(ChartLegendPosition.Bottom)
            )
            .HtmlAttributes(new { style = "height: 700px;" })
            .Events(e => e.DataBound("onMeasuresDataBound"))
            .ChartArea(ch => ch.Background("#eeeeee"))
            .DataSource(ds => ds
                .Read(read => read.Action("Measures_Read", "ProductionUnits", new { id = Url.RequestContext.RouteData.Values["id"] })))
                            .Series(series =>
                            {
                                series.Line(model => model.pHvalue, categoryExpression: model => model.captureDate)
                                      .Color("#FF0914").Name("pH [&deg;]").Axis("pH")
                                      .Style(ChartLineStyle.Smooth).Markers(x => x.Visible(false))
                                      .Tooltip(tooltip => tooltip.Template("ph - #= kendo.toString(category, 'd')# <br/> #= kendo.toString(category, 't')# : #=kendo.format('{0}', data.value)#&deg;"));
                                series.Line(model => model.humidityvalue, categoryExpression: model => model.captureDate)
                                      .Color("#ffae00").Name("Humidity [%]").Axis("hum")
                                      .Style(ChartLineStyle.Smooth).Markers(x => x.Visible(false))
                                      .Tooltip(tooltip => tooltip.Template("hum - #= kendo.toString(category, 'd')# <br/> #= kendo.toString(category, 't')# : #=kendo.format('{0}', data.value)#%"));
                                series.Line(model => model.waterTempvalue, categoryExpression: model => model.captureDate)
                                      .Color("#3E7F2B").Name("Water Temp. [&deg;C]").Axis("water")
                                      .Style(ChartLineStyle.Smooth).Markers(x => x.Visible(false))
                                      .Tooltip(tooltip => tooltip.Template("water - #= kendo.toString(category, 'd')# <br/> #= kendo.toString(category, 't')# : #=kendo.format('{0}', data.value)#&deg;C"));
                                series.Line(model => model.airTempvalue, categoryExpression: model => model.captureDate)
                                      .Color("#73c100").Name("Air Temp. [&deg;C]").Axis("air")
                                      .Style(ChartLineStyle.Smooth).Markers(x => x.Visible(false))
                                      .Tooltip(tooltip => tooltip.Template("air - #= kendo.toString(category, 'd')# <br/> #= kendo.toString(category, 't')# : #=kendo.format('{0}', data.value)#&deg;C"));
                                series.Line(model => model.ORPvalue, categoryExpression: model => model.captureDate)
                                      .Color("#7F385A").Name("ORP [mV]").Axis("orp")
                                      .Style(ChartLineStyle.Smooth).Markers(x => x.Visible(false))
                                      .Tooltip(tooltip => tooltip.Template("orp - #= kendo.toString(category, 'd')# <br/> #= kendo.toString(category, 't')# : #=kendo.format('{0}', data.value)#mV"));
                                series.Line(model => model.DOvalue, categoryExpression: model => model.captureDate)
                                      .Color("#CC0060").Name("Dissolved Oxy [mg/L]").Axis("do")
                                      .Style(ChartLineStyle.Smooth).Markers(x => x.Visible(false))
                                      .Tooltip(tooltip => tooltip.Template("dissolved oxy - #= kendo.toString(category, 'd')# <br/> #= kendo.toString(category, 't')# : #=kendo.format('{0}', data.value)#mg/L"));
                            })
            .CategoryAxis(axis => axis.Pane("advancedPane")
                .Date()
                .Labels(l => l.Visible(false))
                .BaseUnit(ChartAxisBaseUnit.Minutes)
                .BaseUnitStep(15)
                .MajorGridLines(majorGridLines => majorGridLines.Step(100).Visible(true))
                .MajorTicks(ticks => ticks.Step(100))
                .Justify(true)
                .AxisCrossingValue(0, 9000)

            )
            .CategoryAxis(axis => axis
                .Date()
                .Labels(l => l.Visible(true).Step(100).Template("#= kendo.toString(value, 'd')#\n#= kendo.toString(value, 't')#"))
                .BaseUnit(ChartAxisBaseUnit.Minutes)
                .BaseUnitStep(15)
                .MajorGridLines(majorGridLines => majorGridLines.Step(100).Visible(true))
                .MajorTicks(ticks => ticks.Step(100))
                .Justify(true)
                .AxisCrossingValue(9000, 0, 0, 9000, 0, 9000)
            )

            .ValueAxis(axis => axis.Numeric("pH")
                .MajorUnit(1)
                .MajorTicks(x => x.Visible(false))
                .MajorGridLines(m => m.Visible(false))
                .Line(l => l.Visible(false))
                .Labels(l => l.Visible(true))
                .Min(0).Max(10)
            )
            .ValueAxis(axis => axis.Numeric("water")
                .Visible(false)
                .MajorUnit(10)
                .MajorTicks(x => x.Visible(false))
                .MajorGridLines(m => m.Visible(false))
                .Line(l => l.Visible(false))
                .Labels(l => l.Visible(true))
                .Min(0).Max(50)
            )
            .ValueAxis(axis => axis.Numeric("air")
                .MajorUnit(10)
                .MajorTicks(x => x.Visible(false))
                .MajorGridLines(m => m.Visible(false))
                .Line(l => l.Visible(false))
                .Labels(l => l.Visible(true))
                .Min(0).Max(50)
            )
             .ValueAxis(axis => axis.Numeric("hum")
                 .Visible(false)
                 .MajorUnit(10)
                 .MajorTicks(x => x.Visible(false))
                 .MajorGridLines(m => m.Visible(false))
                 .Line(l => l.Visible(false))
                 .Labels(l => l.Visible(true))
                 .Min(0).Max(100)
             )
             .ValueAxis(axis => axis.Numeric("do").Pane("advancedPane")
                 .MajorUnit(10)
                 .MajorTicks(x => x.Visible(true))
                 .MajorGridLines(m => m.Visible(false))
                 .Line(l => l.Visible(false))
                 .Labels(l => l.Visible(true))
             )
             .ValueAxis(axis => axis.Numeric("orp").Pane("advancedPane")
                 .MajorUnit(100)
                 .MajorTicks(x => x.Visible(true))
                 .MajorGridLines(m => m.Visible(false))
                 .Line(l => l.Visible(false))
                 .Labels(l => l.Visible(true))
             )
             .Tooltip(tooltip => tooltip
                .Visible(true)
                .Template("#= kendo.toString(category, 't')# : #=kendo.format('{0}', data.value)#"))
        )
        <div id="MeasureNoData" class="overlay">
            <div>No data available</div>
        </div>
    </div>
</div>

</div>

<style>
     .k-button {
        height: 50px;
        }

        #OptionList {
        background: transparent;
        border-color: transparent;
        color: #333      
        }

        .k-loading-mask {
        opacity: 0;
        }

       .productiontitle {
        font-size:medium;
        }

        @@media screen and (max-width: 480px) {
        .productiontitle{
        font-size:medium;
        }
        }

</style>

<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var measure = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        measure += this + "\n";
                    });
                }
            });
            alert(measure);
        }
    }
</script>

